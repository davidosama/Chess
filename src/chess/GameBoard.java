/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chess;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

/**
 *
 * @author Kero
 */
public class GameBoard extends javax.swing.JFrame implements MouseListener{
    
    
    
    public ArrayList<Pawn> blackPawns;
    public ArrayList<Pawn> whitePawns;
    
    public ArrayList<Knight>blackKnights;
    public ArrayList<Knight>whiteKnights;
    
    public ArrayList<Rook>whiteRooks;
    public ArrayList<Rook>blackRooks;
    
    public ArrayList<Bishop>blackBishops;
    public ArrayList<Bishop>whiteBishops;
    
    public Queen blackQueen;
    public Queen whiteQueen;
    
    public static ArrayList <Piece> AllPieces ;
    
    
    
    boolean PlayerSelected=false;
    static PointMapper pm;
    int x =0;
    int y = 0;
    Tile [][] GameBoardTile;
    
    public GameBoard() {
                

        initComponents();
        
        jPanel1.setLayout(null);
        this.setLocationRelativeTo(null);
        pm = new PointMapper();
        this.addMouseListener(this);
        initializePiecesPositions();
        
        JLabel jLabel1 = new javax.swing.JLabel();
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chess/imgs/background.png"))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 710, 700);

//        GameBoardTile[0][0].setPiece(piece);
        
        
    }
    
    public static boolean isKing (int x, int y){
        //implement
        return false;
    }
    
    public static void Checkmate (String attackingColor){
        //implement
    }
    
    public static void attack (int x, int y){
        //implement
    }
    
    public static boolean isEnemy (int x, int y, String attackingColor){
        //implement
        return false;
    }
    
    public static boolean isEmpty (int x, int y){
        //implement
        return false;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setMinimumSize(new java.awt.Dimension(700, 725));
        jPanel1.setPreferredSize(new java.awt.Dimension(720, 750));
        jPanel1.setRequestFocusEnabled(false);
        jPanel1.setLayout(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 702, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameBoard().setVisible(true);
                
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent e) {
//        if(PlayerSelected){
//            PlayerSelected=!PlayerSelected;
//            Point p = e.getPoint();
//            p=pm.getTileNumber(p.x, p.y);
//            Tile temp = pm.BoardTilesArray[p.x][p.y];
//            
//        }
//        Point p = e.getPoint();
//        WhiteBishop1Lbl.setLocation(pm.getTileCoordinate(p.x, p.y));
    }

    @Override
    public void mousePressed(MouseEvent e) {
        System.out.println(e.getPoint().toString());
        System.out.println(e.getX());
//        if(PointMapper){
//            PlayerSelected=true;
//            
//        }
        
        
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        
    }

    @Override
    public void mouseExited(MouseEvent e) {
       
    }
    
    public void initializePiecesPositions(){
        //put the Black Pawns
        blackPawns=new ArrayList();
        for(int i =0;i<8;i++){
            
            Point p = PointMapper.points[i][6];
            blackPawns.add(new Pawn("Black",p));
            blackPawns.get(i).label.setBounds(p.x, p.y, 60, 60);
            PointMapper.BoardTilesArray[i][6].piece=blackPawns.get(i);
            PointMapper.BoardTilesArray[i][6].setEmpty(false);
            jPanel1.add(blackPawns.get(i).label);
//            blackPawn.label.setVisible(true);
        }
        //white Pawns
        whitePawns=new ArrayList();
        for(int i =0;i<8;i++){
            Point p = PointMapper.points[i][1];
            whitePawns.add(new Pawn("White",p));
            whitePawns.get(i).label.setBounds(p.x, p.y, 60, 60);
            PointMapper.BoardTilesArray[i][1].piece=whitePawns.get(i);
            PointMapper.BoardTilesArray[i][1].setEmpty(false);
            jPanel1.add(whitePawns.get(i).label);
        }
        //black blackKnights
        blackKnights=new ArrayList(2);
        Point p = PointMapper.points[1][7];
        blackKnights.add(new Knight("Black",p));
        blackKnights.get(0).label.setBounds(p.x,p.y,60,60);
        PointMapper.BoardTilesArray[1][7].piece=blackKnights.get(0);
        PointMapper.BoardTilesArray[1][7].setEmpty(false);
        jPanel1.add(blackKnights.get(0).label);
        
        p = PointMapper.points[6][7];
        blackKnights.add(new Knight("Black",p));
        blackKnights.get(1).label.setBounds(p.x,p.y,60,60);
        PointMapper.BoardTilesArray[6][7].piece=blackKnights.get(1);
        PointMapper.BoardTilesArray[6][7].setEmpty(false);
        jPanel1.add(blackKnights.get(1).label);
        
        //white blackKnights
        whiteKnights=new ArrayList();
        p = PointMapper.points[1][0];
        whiteKnights.add(new Knight("White",p));
        whiteKnights.get(0).label.setBounds(p.x,p.y,60,60);
        PointMapper.BoardTilesArray[1][0].piece=whiteKnights.get(0);
        PointMapper.BoardTilesArray[1][0].setEmpty(false);
        jPanel1.add(whiteKnights.get(0).label);
        
        p = PointMapper.points[6][0];
        whiteKnights.add(new Knight("White",p));
        whiteKnights.get(1).label.setBounds(p.x,p.y,60,60);
        PointMapper.BoardTilesArray[6][0].piece=whiteKnights.get(1);
        PointMapper.BoardTilesArray[6][0].setEmpty(false);
        jPanel1.add(whiteKnights.get(1).label);
        
        //black Rooks
        blackRooks=new ArrayList();
        p = PointMapper.points[0][7];
        blackRooks.add(new Rook("Black",p));
        blackRooks.get(0).label.setBounds(p.x,p.y,60,60);
        PointMapper.BoardTilesArray[0][7].piece=blackRooks.get(0);
        PointMapper.BoardTilesArray[0][7].setEmpty(false);
        jPanel1.add(blackRooks.get(0).label);
        
        p = PointMapper.points[7][7];
        blackRooks.add(new Rook("Black",p));
        blackRooks.get(1).label.setBounds(p.x,p.y,60,60);
        PointMapper.BoardTilesArray[7][7].piece=blackRooks.get(1);
        PointMapper.BoardTilesArray[7][7].setEmpty(false);
        jPanel1.add(blackRooks.get(1).label);
        
        
        //white Rooks
        whiteRooks=new ArrayList();
        p = PointMapper.points[0][0];
        whiteRooks.add(new Rook("White",p));
        whiteRooks.get(0).label.setBounds(p.x,p.y,60,60);
        PointMapper.BoardTilesArray[0][0].piece=whiteRooks.get(0);
        PointMapper.BoardTilesArray[0][0].setEmpty(false);
        jPanel1.add(whiteRooks.get(0).label);
        
        p = PointMapper.points[7][0];
        whiteRooks.add(new Rook("White",p));
        whiteRooks.get(1).label.setBounds(p.x,p.y,60,60);
        PointMapper.BoardTilesArray[7][0].piece=whiteRooks.get(1);
        PointMapper.BoardTilesArray[7][0].setEmpty(false);
        jPanel1.add(whiteRooks.get(1).label);
        
        //black bishops
        blackBishops=new ArrayList();
        p = PointMapper.points[2][7];
        blackBishops.add(new Bishop("Black",p));
        blackBishops.get(0).label.setBounds(p.x,p.y,60,60);
        PointMapper.BoardTilesArray[2][7].piece=blackBishops.get(0);
        PointMapper.BoardTilesArray[2][7].setEmpty(false);
        jPanel1.add(blackBishops.get(0).label);
        
        p = PointMapper.points[5][7];
        blackBishops.add(new Bishop("Black",p));
        blackBishops.get(1).label.setBounds(p.x,p.y,60,60);
        PointMapper.BoardTilesArray[5][7].piece=blackBishops.get(1);
        PointMapper.BoardTilesArray[5][7].setEmpty(false);
        jPanel1.add(blackBishops.get(1).label);
        
        //white bishops
        whiteBishops=new ArrayList();
        p = PointMapper.points[2][0];
        whiteBishops.add(new Bishop("White",p));
        whiteBishops.get(0).label.setBounds(p.x,p.y,60,60);
        PointMapper.BoardTilesArray[2][0].piece=whiteBishops.get(0);
        PointMapper.BoardTilesArray[2][0].setEmpty(false);
        jPanel1.add(whiteBishops.get(0).label);
        
        p = PointMapper.points[5][0];
        whiteBishops.add(new Bishop("White",p));
        whiteBishops.get(1).label.setBounds(p.x,p.y,60,60);
        PointMapper.BoardTilesArray[5][0].piece=whiteBishops.get(1);
        PointMapper.BoardTilesArray[5][0].setEmpty(false);
        jPanel1.add(whiteBishops.get(1).label);
        
        //black Queen
        p=PointMapper.points[4][7];
        blackQueen=new Queen("Black",p);
        blackQueen.label.setBounds(p.x,p.y,60,60);
        PointMapper.BoardTilesArray[4][7].piece=blackQueen;
        PointMapper.BoardTilesArray[4][7].setEmpty(false);
        jPanel1.add(blackQueen.label);
        
        //white Queen
        p=PointMapper.points[4][0];
        whiteQueen=new Queen("White",p);
        whiteQueen.label.setBounds(p.x,p.y,60,60);
        PointMapper.BoardTilesArray[3][0].piece=whiteQueen;
        PointMapper.BoardTilesArray[3][0].setEmpty(false);
        jPanel1.add(whiteQueen.label);
        
        
        
        
       
       
        

        

        
       
        
   }

    @Override
    public void paintComponents(Graphics g) {
        super.paintComponents(g); //To change body of generated methods, choose Tools | Templates.
        for(int i =0;i<8;i++){
            for(int j =0;j<8;j++){
                Tile t = PointMapper.BoardTilesArray[i][j];
                if(t.isEmpty()==false){
                    Piece p = t.getPiece();
                    if(p.alive && (p.position != PointMapper.getTileNumber(p.label.getLocation().x, p.label.getLocation().y))){
                        p.label.setLocation(PointMapper.points[p.position.x][p.position.y]);
                        t.setEmpty(true);
                        PointMapper.BoardTilesArray[p.position.x][p.position.y].setEmpty(false);
                    }
                }
            }
        }
  }
    
    
}
