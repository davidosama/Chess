/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chess;

/**
 *
 * @author Kero
 */
public class HowToPlay extends javax.swing.JFrame {

    /**
     * Creates new form HowToPlay
     */
    public HowToPlay() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("How To Play");
        setResizable(false);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Terms:\nRanks are the rows of squares that run horizontally on the Game Board and Files are the columns\nthat run vertically. Diagonals run diagonally. Position the Game Board so that the red square is at the bottom\nright corner for each player. Place the Ivory Play Pieces on the first rank from left to right in order: Rook, Knight,\nBishop, Queen, King, Bishop, Knight and Rook. Place all of the Pawns on the second rank. Then place the\nBlack Play Pieces on the board as shown in the diagram. Note: the Ivory Queen will be on a red square and\n the black Queen will be on a black space. \n\n\nPlay:\nIvory always plays first. Players alternate turns. Only one Play Piece may be moved on a turn, except when\ncastling (see description on back). All Play Pieces must move in a straight path, except for the Knight. Also,\nthe Knight is the only Play Piece that is allowed to jump over another Play Piece.\n\n\nPlay Piece Moves: \nA Pawn moves forward one square at a time. There are two exceptions to this rule: \n1. On a Pawn’s first move, it can move forward one or two squares.\n2. When capturing a piece (see description on back), a Pawn moves one square diagonally ahead. \nAt the beginning of the game, the Pawn is the least valuable Play Piece. But, when a Pawn reaches the \nother side of the board it can be converted into any Play Piece except for the King.\n\nThe Knight is the only Play Piece that can jump over another Play Piece. Knights move three squares at a time:\ntwo spaces forward or backward, then one space left or right, or two spaces to the left or right, then one\nspace forward or backward. The move looks like the letter L. The Knight always ends up landing on a square\nopposite the color from which it started. \n\nThe Bishop moves diagonally as many open squares as you like. The Bishop must remain on the same\ncolor square as it started the game on. \n\nThe Rook moves in a straight line, horizontally or vertically as many open squares as you like.\nBesides the Queen, the Rook is the next most powerful Play Piece.\n \nThe Queen is the most powerful of the Play Pieces. The Queen moves in any direction (horizontally,\nvertically or diagonally) as many open squares as you like.\n\nThe King is the most important Play Piece, because if it becomes trapped, you’ll lose the game. The King\nmoves one square in any direction, as long as it doesn’t put itself in Check. \nCheck: You are in Check if an opponent’s Play Piece is in a position on the board to capture your King. \nTo save your King from Check you must do one of the following: \n1. Move the King out of the way of the opponent’s Play Piece. \n2. Move another one of your Play Pieces to block your opponent. \n3. Capture the opponent’s Play Piece that is threatening your King. \nCheckmate: When your King cannot be saved from Check, it’s called Checkmate and you lost the game. \nCheckmate means “the King is dead” in Persian. \nCapturing: When you move one of your Play Pieces and it ends on an opponent’s Play Piece, you capture\nit and remove it from the Game Board.\n\n\nWinning: If you put your opponent’s King in Check so he can’t escape, call Checkmate… you win!\nStalemate: If a player’s King is not in Check, but any possible move places him in Check, it’s a Stalemate.\n");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HowToPlay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HowToPlay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HowToPlay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HowToPlay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HowToPlay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
